# This is a basic workflow to help you get started with Actions

name: Minarca-client

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  RELEASE_TAG: 6.1.0a3

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-22.04-arm

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      # 
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install python2 librsync-dev libacl1-dev git xvfb xauth cron zenity kdialog -y

      - name: Install tox
        run: pip install tox

      - name: Clone minarca client
        run: |
          git clone https://gitlab.com/ikus-soft/minarca.git
          cd minarca
          git checkout ${{ env.RELEASE_TAG }}

      - name: Patch minarca client for arm64
        run: |
          cd minarca
          sed -i "s/architecture='amd64'/architecture='arm64'/g" packaging/minarca.spec
          sed -i '/^\s*import os\s*$/d' minarca_client/core/notification/tests/test_notification.py
          sed -i "s|NO_DBUS = not os.environ.get('DBUS_SESSION_BUS_ADDRESS', False)|NO_DBUS = True|" minarca_client/core/notification/tests/test_notification.py

      - name: Build and run tests
        run: |
          cd minarca
          tox -e flake8,black,isort
          tox -e py3-linux
        
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.SEMANTIC_RELEASE_PAT }}

      # - name: Build package
      #   run: |
      #     cd minarca
      #     tox -e pyinstaller-linux
      #     mv dist/minarca-client_*_arm64.deb dist/minarca-client_${{ env.RELEASE_TAG }}_arm64.deb

      # - name: Upload to GitHub Release
      #   uses: actions/upload-artifact@v4
      #   with:
      #     # Name of the artifact to upload.
      #     # Optional. Default is 'artifact'
      #     name: minarca-client_${{ env.RELEASE_TAG }}_arm64.deb

      #     # A file, directory or wildcard pattern that describes what to upload
      #     # Required.
      #     path: minarca/dist/minarca-client_${{ env.RELEASE_TAG }}_arm64.deb

      #     # The desired behavior if no files are found using the provided path.
      #     # Available Options:
      #     #   warn: Output a warning but do not fail the action
      #     #   error: Fail the action with an error message
      #     #   ignore: Do not output any warnings or errors, the action does not fail
      #     # Optional. Default is 'warn'
      #     # if-no-files-found:

      #     # Duration after which artifact will expire in days. 0 means using default retention.
      #     # Minimum 1 day.
      #     # Maximum 90 days unless changed from the repository settings page.
      #     # Optional. Defaults to repository settings.
      #     # retention-days:

      #     # The level of compression for Zlib to be applied to the artifact archive.
      #     # The value can range from 0 to 9.
      #     # For large files that are not easily compressed, a value of 0 is recommended for significantly faster uploads.
      #     # Optional. Default is '6'
      #     # compression-level:

      #     # If true, an artifact with a matching name will be deleted before a new one is uploaded.
      #     # If false, the action will fail if an artifact for the given name already exists.
      #     # Does not fail if the artifact does not exist.
      #     # Optional. Default is 'false'
      #     # overwrite:

      #     # Whether to include hidden files in the provided path in the artifact
      #     # The file contents of any hidden files in the path should be validated before
      #     # enabled this to avoid uploading sensitive information.
      #     # Optional. Default is 'false'
      #     # include-hidden-files: